version: "3.8"

networks:
  dev_env:
    driver: bridge

volumes:
  redisdata:
  pgdata:

services:
  health-redis:
    image: redis:alpine3.19
    restart: unless-stopped
    networks:
      - dev_env
    volumes:
      - redisdata:/data
  
  health-db:
    image: postgres:13.14-alpine3.19
    restart: unless-stopped
    networks:
      - dev_env
    command: postgres -c 'max_connections=1000'
    volumes:
      - pgdata:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      PGDATA: /var/lib/postgresql/data


  health-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        DOCKER_BUILDKIT: 1
    restart: unless-stopped
    networks:
      - dev_env
    volumes:
      - ./backend:/app
    command: sh -c "poetry run python manage.py migrate && poetry run python manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env
    depends_on:
      - health-db
      - health-redis

  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        DOCKER_BUILDKIT: 1
    restart: unless-stopped
    networks:
      - dev_env
    volumes:
      - ./backend:/app
    command: sh -c "poetry run celery -A healthlink worker -l info"
    env_file:
      - ./backend/.env
    depends_on:
      - health-backend
      - health-db
      - health-redis


